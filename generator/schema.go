package generator

import (
	"html/template"
	"path"
	"path/filepath"

	"github.com/maximelamure/restli-go/common"
	"github.com/maximelamure/restli-go/generator/spec"
)

// Generates the data schema from the pdsc
const SchemaExtension = ".pdsc"

const schemaTemplateStr = `// DO NOT EDIT! Automatically generated by restli-go client gen
package {{.Package}}

// {{.Doc}}
type {{.Name}} struct {
{{- range .Fields}}
	{{.Name}} {{.Type}}` + " `json:\"{{.JSONName}},omitempty\"`" +
	`
{{- end}}
}
`

type SchemaVM struct {
	Package string
	Doc     string
	Name    string
	Fields  []*SchemaItemVM
}

type SchemaItemVM struct {
	Name     string
	Type     string
	JSONName string
}

func NewSchemaItemVM(field *spec.Field) *SchemaItemVM {
	return &SchemaItemVM{
		Name:     capitalInitialism(field.Name),
		Type:     toGoType(field.Type),
		JSONName: field.Name,
	}
}

func NewSchemaVM(schema *spec.Schema) *SchemaVM {
	sc := &SchemaVM{
		Name:    schema.Name,
		Package: schema.Package,
		Doc:     schema.Doc,
	}
	sc.Fields = make([]*SchemaItemVM, 0, len(schema.Fields))
	for _, f := range schema.Fields {
		sc.Fields = append(sc.Fields, NewSchemaItemVM(f))
	}

	return sc
}

var schemaTemplate *template.Template

func init() {
	var err error
	schemaTemplate, err = template.New("schema").Parse(schemaTemplateStr)
	if err != nil {
		panic(err)
	}
}

type schemaGenerator struct {
	output string
}

func NewSchemaGenerator(output string) Generator {
	return &schemaGenerator{
		output: output,
	}
}

func (s *schemaGenerator) Generate(input string) error {
	var schema spec.Schema
	err := loadSchema(input, &schema)
	if err != nil {
		return err
	}

	schema.Package = path.Base(s.output)

	vm := NewSchemaVM(&schema)
	data, errCode := generate(vm, schemaTemplate)
	if errCode != nil {
		return common.Wrap(errCode)
	}

	out := filepath.Join(s.output, schema.GetFileName())
	return save(string(data), out)
}
