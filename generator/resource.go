package generator

import (
	"html/template"
	"path"
	"path/filepath"
	"strings"

	"github.com/maximelamure/restli-go/common"
	"github.com/maximelamure/restli-go/generator/spec"
)

const IDLExtension = ".json"

const resourceTemplateStr = `// DO NOT EDIT! Automatically generated by restli-go client gen
package {{.Namespace}}

import (
	"context"
	"strconv"

	"github.com/maximelamure/restli-go/common"
)

const (
	PATH = "{{.Path}}"
	HOST = "http://localhost:5439/bootcamp-backend" // todo: from command line / config
)

func Get{{.ResourceName}}(ctx context.Context, {{.IdentityParam}} {{.IdentityType}}) (*{{.ResourceName}}, error) {
	url := HOST + PATH + "/" + {{.URLParam}}
	codec := getCodec()

	p := {{.ResourceName}}{}
	err := get(ctx, url, 0, codec, &p)
	if err != nil {
		return nil, common.Wrap(err)
	}

	return &p, nil
}
`

var resourceTemplate *template.Template

func init() {
	var err error
	resourceTemplate, err = template.New("resource").Parse(resourceTemplateStr)
	if err != nil {
		panic(err)
	}
}

type GetVM struct {
	Namespace        string
	Doc              string
	Path             string
	IdentityParam    string
	IdentityType     string
	URLParam         string
	ResourceName     string
	ConvertParamFunc string
}

func NewGetVM(res *spec.ResourceSchema, output string) GetVM {
	vm := GetVM{}
	vm.Namespace = path.Base(output)
	vm.Doc = res.Doc
	vm.Path = res.Path
	vm.IdentityParam = capitalInitialism(res.Collection.Identifier.Name)
	vm.IdentityType = toGoType(res.Collection.Identifier.Type)
	vm.URLParam = paramToString(vm.IdentityParam, vm.IdentityType)
	ss := strings.Split(res.Schema, ".")
	vm.ResourceName = ss[len(ss)-1]

	return vm
}

type resourceGenerator struct {
	output string
}

func NewResourceGenerator(output string) Generator {
	return &resourceGenerator{
		output: output,
	}
}

func (r *resourceGenerator) Generate(input string) (err error) {
	var res *spec.ResourceSchema
	err = loadSchema(input, &res)
	if err != nil {
		return err
	}

	vm := NewGetVM(res, r.output)
	data, errCode := generate(vm, resourceTemplate)
	if errCode != nil {
		return common.Wrap(errCode)
	}

	// todo: override the prefix from config/cmd
	out := filepath.Join(r.output, res.GetFileName("client"))
	return save(string(data), out)
}
